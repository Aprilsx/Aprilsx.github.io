{"total":18,"pageSize":10,"pageCount":2,"data":[{"title":"Java3rd.log4j","slug":"sprouting180401","date":"2018-04-01T02:02:52.000Z","updated":"2018-04-04T04:55:47.000Z","comments":true,"path":"api/articles/sprouting180401.json","excerpt":"<p></p><p style=\"text-align: center;\">❤</p><p></p>\n<h3 id=\"What-is-the-log4j\"><a href=\"#What-is-the-log4j\" class=\"headerlink\" title=\"What is the log4j?\"></a>What is the log4j?</h3><h3 id=\"How-to-install\"><a href=\"#How-to-install\" class=\"headerlink\" title=\"How to install?\"></a>How to install?</h3><h3 id=\"How-to-use\"><a href=\"#How-to-use\" class=\"headerlink\" title=\"How to use?\"></a>How to use?</h3><h3 id=\"Config-Means\"><a href=\"#Config-Means\" class=\"headerlink\" title=\"Config Means\"></a>Config Means</h3>","keywords":null,"cover":null,"content":null,"text":"❤What is the log4j?How to install?How to use?Config Means<br>  参考文献：<br>🍀From Clover https://aprilsx.github.io/2018/04/01/sprouting180401/ ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":16,"path":"api/tags/sprouting.json"}]},{"title":"Object:所有类的超类","slug":"sprouting180326","date":"2018-03-26T02:35:36.000Z","updated":"2018-04-13T01:43:12.000Z","comments":true,"path":"api/articles/sprouting180326.json","excerpt":"<p style=\"text-align: center;\">❤</p>\n\n<h3 id=\"eaquals\"><a href=\"#eaquals\" class=\"headerlink\" title=\".eaquals()\"></a>.eaquals()</h3><p>用于检测一个对象是否等于另外一个对象，这个方法将判断两个对象是否具有相同的引用。设计评判标准：</p>\n<ul>\n<li>自反性</li>\n<li>对称性</li>\n<li>传递性</li>\n<li>一致性</li>\n</ul>\n<p>我们判断两个对象是否相等，主要得看这两个对象的状态是否相等。这样一来，我们一般会在类中重写equals()这个方法，以此来比较状态的一致性。<br>模版与注意事项如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YourClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">eaquals</span><span class=\"params\">(Object otherObject)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 判断引用是否相同，如果内存的引用相同，那肯定是相同的</span></span><br><span class=\"line\">        <span class=\"comment\">// a quick test to see if the objects are identical.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == otherObject) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 判断参数是否非空</span></span><br><span class=\"line\">        <span class=\"comment\">// must return false if the explicit parameter is null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (otherObject == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3. 判断是否为同一类</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里需要看情况处理</span></span><br><span class=\"line\">        <span class=\"comment\">// * 子类能够拥有自己的相等概念，则对称性需求将强制采用getClass进行检测</span></span><br><span class=\"line\">        <span class=\"comment\">// ** 超类决定了相等的概念，那么使用instanceof判断是否是该超类的子类就可以了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getClass() != otherObject.getClass()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4. 判断被比较的两个对象的状态是否一致</span></span><br><span class=\"line\">        <span class=\"comment\">// now we know 'otherObject' which 'non-null YourClass'</span></span><br><span class=\"line\">        YourClass other = (YourClass) otherObject;</span><br><span class=\"line\">        <span class=\"comment\">// 假设你的对象实例域有：name,salary,hireDay</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> name.eaquals(other.name) &amp;&amp; salary == other.salary &amp;&amp; hireDay.eaquals(other.hireDay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","keywords":null,"cover":null,"content":null,"text":"❤.eaquals()用于检测一个对象是否等于另外一个对象，这个方法将判断两个对象是否具有相同的引用。设计评判标准：自反性对称性传递性一致性我们判断两个对象是否相等，主要得看这两个对象的状态是否相等。这样一来，我们一般会在类中重写equals()这个方法，以此来比较状态的一致性。","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":16,"path":"api/tags/sprouting.json"}]},{"title":"设计技巧","slug":"sprouting180325","date":"2018-03-25T03:32:48.000Z","updated":"2018-04-13T01:43:33.000Z","comments":true,"path":"api/articles/sprouting180325.json","excerpt":"<p style=\"text-align: center;\">❤</p>\n\n<p><img src=\"/images/sprouting180325_1.png\" alt=\"\"></p>\n<h2 id=\"类的设计技巧\"><a href=\"#类的设计技巧\" class=\"headerlink\" title=\"类的设计技巧\"></a>类的设计技巧</h2><ul>\n<li><p>一定要保证数据私有</p>\n<ul>\n<li>这是最重要的；绝对不要破坏封装性。有时候，需要编写一个访问器方法或更改器方法，但是最好还是保持实例域的私有性。很多惨痛的经验告诉我们，数据的表示形式很可能会改变，但它们的使用方式却不会经常发生变化。当数据保持私有时，它们的表示形式的变化不会对类的使用者产生影响，即使出现bug也易于检测。</li>\n</ul>\n</li>\n<li><p>一定要对数据初始化</p>\n</li>\n<li>不要在类中使用过多的基本类型<ul>\n<li>如果存在多个属性具有一定联系的情况，最好将这几个属性构建成对象，以方便使用</li>\n</ul>\n</li>\n<li>不是所有的域都需要独立的域访问器和域更改器</li>\n<li>将职责过多的类进行分解</li>\n<li>类名和方法名要能够体现它们的职责</li>\n<li>优先使用不可变的类<ul>\n<li>更改对象的问题在于，如果多个线程试图同时更新一个对象，就会发生并发更改。其结果是不可预料的。如果类是不可变的，就可以安全地在多个线程间共享其对象  </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"继承的设计技巧\"><a href=\"#继承的设计技巧\" class=\"headerlink\" title=\"继承的设计技巧\"></a>继承的设计技巧</h2><ul>\n<li>将公共操作和域放在超类</li>\n<li>不要使用受保护的域</li>\n<li>使用继承实现“is-a”关系</li>\n<li>除非所有继承的方法都有意义，否则不要使用继承</li>\n<li>在覆盖方法时，不要改变预期的行为</li>\n<li>使用多态，而非类型信息</li>\n<li>不要过多的使用反射</li>\n</ul>","keywords":null,"cover":"/images/sprouting180325_1.png","content":null,"text":"❤ [Figure] 🍀From Clover https://aprilsx.github.io/2018/03/25/sprouting180325/ ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":16,"path":"api/tags/sprouting.json"}]},{"title":"一些关于Java要记住的话","slug":"sprouting180319b","date":"2018-03-19T08:44:36.000Z","updated":"2018-04-04T04:58:44.000Z","comments":true,"path":"api/articles/sprouting180319b.json","excerpt":"<p style=\"text-align: center;\">❤</p>\n\n<ul>\n<li><b>Data</b><ol>\n<li>类名用大驼峰，属性用小驼峰（对于java来说，大小写非常重要）</li>\n<li>源代码的文件名必须与公共类的名字相同，并用.java作为扩展名</li>\n<li>每个java应用程序必须有一个main函数","keywords":null,"cover":"/images/sprouting180319b_1.png","content":null,"text":"❤Data类名用大驼峰，属性用小驼峰（对于java来说，大小写非常重要）源代码的文件名必须与公共类的名字相同，并用.java作为扩展名每个java应用程序必须有一个main函数   每个句子必须以分号结束不要担心你注释的代码会膨胀你的可执行代码Java是一种强类型语言，记住数据类","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":16,"path":"api/tags/sprouting.json"}]},{"title":"英文录","slug":"sprouting180319","date":"2018-03-19T03:05:06.000Z","updated":"2018-04-04T07:03:42.000Z","comments":true,"path":"api/articles/sprouting180319.json","excerpt":"<p style=\"text-align: center;\">❤</p>\n\n<blockquote>\n<ul>\n<li><h3 id=\"Eden\"><a href=\"#Eden\" class=\"headerlink\" title=\"Eden\"></a>Eden</h3><h5 id=\"伊甸园；堆内存中新生代分为Eden-Suvivor\"><a href=\"#伊甸园；堆内存中新生代分为Eden-Suvivor\" class=\"headerlink\" title=\"伊甸园；堆内存中新生代分为Eden,Suvivor\"></a>伊甸园；堆内存中新生代分为Eden,Suvivor</h5><p>  Eden space is where objects are created. Life for them is all happy but eventually they’re chased out by a cherub into the wilderness of the young and later the old generation.</p>\n<p>  They are never allowed back in Eden space, they have to stay in the rough world of continuous tenuring until the Grim Collector comes for them.</p>\n<p>  However, unlike the original Eden, it is possible to die there. Well, I guess all metaphors break down under closer scrutiny.</p>","keywords":null,"cover":null,"content":null,"text":"❤Eden伊甸园；堆内存中新生代分为Eden,Suvivor  Eden space is where objects are created. Life for them is all happy but eventually they’re chased out by a c","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":16,"path":"api/tags/sprouting.json"}]},{"title":"读我","slug":"me180316","date":"2018-03-16T06:38:24.000Z","updated":"2018-03-20T15:40:14.000Z","comments":true,"path":"api/articles/me180316.json","excerpt":"<p style=\"text-align: center;\">❤</p>\n\n<h1 id=\"歌手与歌\"><a href=\"#歌手与歌\" class=\"headerlink\" title=\"歌手与歌\"></a>歌手与歌</h1><blockquote>\n<dl><br>  <dt><b>叶炫清</b> - 从前慢</dt><br>  <dd>“记得早些少年时，大家诚诚恳恳，说一句是一句”</dd><br>  <img src=\"/images/me180316_1.jpeg\" alt=\"\"><br>","keywords":null,"cover":"/images/me180316_1.jpeg","content":null,"text":"❤歌手与歌<br>  叶炫清 - 从前慢<br>  “记得早些少年时，大家诚诚恳恳，说一句是一句”<br>   [Figure] 🍀From Clover https://aprilsx.github.io/2018/03/16/me180316/ ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"me","slug":"me","count":1,"path":"api/tags/me.json"}]},{"title":"Java中main函数","slug":"sprouting180315","date":"2018-03-15T09:58:29.000Z","updated":"2018-03-25T03:49:45.000Z","comments":true,"path":"api/articles/sprouting180315.json","excerpt":"<p style=\"text-align: center;\">❤</p>  \n\n<p>上手第一个Java程序，照着课本例子抄的，全程手写，结果终了执行的时候出了问题。<br></p>\n<ul>\n<li>下面是我写的错误代码：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.trainning.aprilsx;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> april</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Welcome</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        String greeting = <span class=\"string\">\"Welcom to Core Java!\"</span>;</span><br><span class=\"line\">        System.out.println(greeting);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; greeting.length(); i++)</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","keywords":null,"cover":"/images/sprouting180319_1.png","content":null,"text":"❤  上手第一个Java程序，照着课本例子抄的，全程手写，结果终了执行的时候出了问题。<br>下面是我写的错误代码：  1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":16,"path":"api/tags/sprouting.json"}]},{"title":"Hello!","slug":"hello-world","date":"2018-03-13T15:24:05.000Z","updated":"2018-04-04T05:22:26.000Z","comments":true,"path":"api/articles/hello-world.json","excerpt":"<p><img src=\"/images/miku.png\" alt=\"\"><br>","keywords":null,"cover":"/images/miku.png","content":null,"text":" [Figure] 🍀From Clover https://aprilsx.github.io/2018/03/13/hello-world/ ","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}