{"title":"Java中main函数","slug":"sprouting180315","date":"2018-03-15T09:58:29.000Z","updated":"2018-03-20T01:14:50.000Z","comments":true,"path":"api/articles/sprouting180315.json","photos":[],"link":"","excerpt":null,"covers":["/images/sprouting180319_1.png"],"content":"<p style=\"text-align: center;\">❤</p>  \n\n<p>上手第一个Java程序，照着课本例子抄的，全程手写，结果终了执行的时候出了问题。<br></p>\n<ul>\n<li>下面是我写的错误代码：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.trainning.aprilsx;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> april</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Welcome</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        String greeting = <span class=\"string\">\"Welcom to Core Java!\"</span>;</span><br><span class=\"line\">        System.out.println(greeting);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; greeting.length(); i++)</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>原来<strong>main()</strong>这里少了参数，正确的写法应该是<strong>main(String[] args)</strong></p>\n<ul>\n<li>正确代码：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.trainning.aprilsx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> april</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Welcome</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        String greeting = <span class=\"string\">\"Welcom to Core Java!\"</span>;</span><br><span class=\"line\">        System.out.println(greeting);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; greeting.length(); i++)</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>为什么main（）函数的写法是<code>public static void main(String[] args)</code>呢？  </p>\n<ul>\n<li>暴力解答：<br>就这么规定的！什么都得有个规则不是。固定搭配，这样才能被jvm识别调用（<a href=\"https://baike.baidu.com/item/java%E8%99%9A%E6%8B%9F%E6%9C%BA/6810577?fr=aladdin\" target=\"_blank\" rel=\"noopener\">jvm是什么？</a>）<br><b><br>  所以每个java程序都必须有一个main方法，其格式如下  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        program statments</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</b></li>\n</ul>\n<p>&gt;</p>\n<ul>\n<li><p>理论分析：<br><strong>#关键字分析</strong><br>首先我们需要了解Java的<a href=\"https://www.w3cschool.cn/java/java-modifier-types.html\" target=\"_blank\" rel=\"noopener\">修饰符</a>有哪些。下面罗列了几个必须知道的  </p>\n<ol>\n<li>（访问修饰符）default 默认的就是这个。用该修饰符修饰的变量、方法、类或者构造函数，只能在它所在包内使用（<a href=\"https://www.w3cschool.cn/java/java-package.html\" target=\"_blank\" rel=\"noopener\">什么是包？</a>）</li>\n<li>（访问修饰符）private <code>（针对类而言，类内）</code>私有的。用该修饰符修饰的，其范围更小，仅能在当前的类中使用，而且不能被继承·不能被继承·不能被继承（<a href=\"https://www.w3cschool.cn/java/java-object-classes.html\" target=\"_blank\" rel=\"noopener\">什么是类？</a>）</li>\n<li>（访问修饰符）pulic <code>（针对包而言，包内）</code>共有的。对所有类可见，可以说是全局的了，范围最大。</li>\n<li>（访问修饰符）protected <code>（针对包而言）</code>受保护的。对同一包内类和所有子类可见。相当于上了个锁子，你锁了，别的包也就懂了。 </li>\n<li>（非访问修饰符）static 静态的。全局概念的，意味着你声明的是只此一份的东西，指针永远指在这里，这样就会有一些条条框框的东西诞生，这不能用那不能用的，<a href=\"http://blog.csdn.net/liuqiaoyu080512/article/details/8455707\" target=\"_blank\" rel=\"noopener\">建议进一步了解</a>。如果你理解深拷贝和浅拷贝，会对它有更深的理解。（<a href=\"https://www.cnblogs.com/always-chang/p/6107437.html\" target=\"_blank\" rel=\"noopener\">什么是深拷贝和浅拷贝？</a>）</li>\n<li>（其他）void 空数据类型；main 一个英文单词，被特别的用在这里。String[] 声明一个字符串数组用。args 单词Arguments的缩写，你可以随意改，也是被特别的用在这里。  </li>\n</ol>\n<p>所以main()函数是一个名字为main的；无返回值的；全局共有的；静态唯一的；带有字符串数组参数的特殊函数。</p>\n<p><strong>#调用过程分析（有待总结）</strong><br>main函数的终极秘密是与jvm紧密相关的，<code>运行已编译的程序时，Java虚拟机将从指定类中的main方法开始执行，因此为了代码能够执行，在类的源文件中必须包含一个main方法</code>。</p>\n<p>现在总结不出真正原因，这里先列出main函数参数的传递过程。<br><img src=\"/images/sprouting180319_1.png\" alt=\"\"><br>可以看到，我们是可以向main函数中传递参数的。我们知道，我们在编程时，所有的线程终归都在main函数中生死轮回，main函数就是最大的官。但是，现在还有比main更高的东西在支配它，并且掌管它的生死。  <br><br><b>那么问题来了，谁才是main函数背后的操控者呢？（我觉得应该是进程相关的东西，等我了解完进程是如何诞生和灭亡之后，再回来补充吧！）</b></p>\n</li>\n</ul>\n<p><br></p>\n<blockquote>\n<p>  参考文献：<br>  [ 1 ]   <a href=\"http://blog.csdn.net/lxjstudyIT/article/details/51907625\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/lxjstudyIT/article/details/51907625</a><br>  [ 2 ]   <a href=\"http://blog.csdn.net/qiaoquan3/article/details/53325915\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qiaoquan3/article/details/53325915</a><br>  [ 3 ]   <a href=\"https://jingyan.baidu.com/album/6525d4b1605662ac7d2e94c8.html?picindex=1\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/album/6525d4b1605662ac7d2e94c8.html?picindex=1</a></p>\n</blockquote>\n<p>🍀From Clover <a href=\"https://aprilsx.github.io/2018/03/15/sprouting180315/\">https://aprilsx.github.io/2018/03/15/sprouting180315/</a> </p>\n","categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":3,"path":"api/tags/sprouting.json"}]}