{"title":"一些关于Java要记住的话","slug":"sprouting180319b","date":"2018-03-19T08:44:36.000Z","updated":"2018-03-20T13:45:05.000Z","comments":true,"path":"api/articles/sprouting180319b.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p style=\"text-align: center;\">❤</p>\n\n<ul>\n<li><b>Data</b><ol>\n<li>类名用大驼峰，属性用小驼峰（对于java来说，大小写非常重要）</li>\n<li>源代码的文件名必须与公共类的名字相同，并用.java作为扩展名</li>\n<li>每个java应用程序必须有一个main函数   </li>\n<li>每个句子必须以分号结束</li>\n<li>不要担心你注释的代码会膨胀你的可执行代码</li>\n<li>Java是一种强类型语言，记住数据类型的大小很重要。Java没有任何无符号形式的整型，这是因为Java跨平台的原因，规定了数值类型所占据的字节数量与平台无关</li>\n<li>16进制：0x; 2进制：0b; float：f; double：d（建议不使用8进制，8进制数前缀为0，不好区分;16进制可以表示浮点数，如0.125可表示为0x1.0p-3）</li>\n<li>从Java7以后，数字字面量中能够添加下划线，如1_000等价于1000</li>\n<li>浮点数值不适合用于无法接受舍入误差的金融计算中。如果不允许任何舍入误差情况存在，就应该使用BigDecimal类</li>\n<li>Java有一个能够表示任意精度的算术包，通常称为“大数值”——big number，一个Java对象</li>\n<li>‘A’和”A”是不一样的</li>\n<li>由于Unicode编码的原因，注释中\\u的使用一定要注意</li>\n<li>强烈建议不要在程序中使用char类型，除非确实需要处理UTF-16代码单元。最好将字符串作为抽象数据类型处理</li>\n<li></li>\n</ol>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li><b>数据类型快查表</b></li>\n</ul>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">存储需求/字节</th>\n<th style=\"text-align:left\">思维映射</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>整型</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">最常用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">特定场合，如底层文件处理或控制占用存储空间量的大数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">地球上所有人口加起来都没它大,长整型数值有一个后缀L或l。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">特定场合，同上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>浮点型</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">在很多情况下，float的精度很难满足需求，一般需要单精度或存储大量数据才会用到。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">常用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>char型</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>boolean类型</code></td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<ul>\n<li><p><b>Variable</b></p>\n<ol>\n<li>变量名必须是一个以字母开头，每个字符都是有意义的，并且大小写敏感</li>\n<li>变量名基本上没有长度限制，你自己肯定也不会起太长的变量名</li>\n<li>不提倡多个变量同时声明，逐一声明每个变量可以提高程序的可读性</li>\n<li>你声明了一个变量之后，记得进行初始化，要不后面用的时候会报错</li>\n<li>Java中，变量的声明尽可能地靠近变量第一次使用的地方，这是一种良好的编程风格</li>\n<li>用final修饰的变量只能被赋值一次，即表示常量。常量名使用全大写，中间可以加下划线_</li>\n<li>必须用final定义常量</li>\n<li>类常量定义于main函数的外面</li>\n</ol>\n</li>\n<li><p><b>运算符</b></p>\n<ol>\n<li>整数被0除将会产生一个异常，而浮点数被0除将会得到无穷大或NaN结果</li>\n<li>strictfp关键字标记的方法必须使用严格的浮点计算来生成可再生的结果。如：<code>public static strictfp</code>，main函数中所有的指令都将使用严格计算。如果strictfp标记了一个类，那么这个类内都将进行严格的浮点运算了</li>\n<li>对于大多数程序而言，浮点溢出不是大问题，但如果是计算卫星发射，火箭回收，那可得注意了，但估计也绝对是不可能选Java去做这些，233333</li>\n<li>在java中没有幂运算，需要借助pow函数，pow(3,2) = 9</li>\n<li>floorMod函数解决一个长期存在的有关整数求余的问题。如时钟时针指向问题，-11点应指向floorMod(-11+12,12) = 1</li>\n</ol>\n</li>\n<li><p><b>数据类型转换表</b></p>\n</li>\n</ul>\n<div id=\"flowchart-0\" class=\"flow-chart\"></div>\n\n<div id=\"sequence-0\"></div>\n\n\n\n<p><br></p>\n<blockquote>\n<p>  参考文献：<br>  [ 1 ] 《Java核心技术 I》- p29<br>  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\"></script><textarea id=\"sequence-0-code\" style=\"display: none\">Alice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!</textarea><textarea id=\"sequence-0-options\" style=\"display: none\">{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12,\"theme\":\"simple\"}</textarea><script>  var code = document.getElementById(\"sequence-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-0-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-0\", options);</script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"></script><textarea id=\"flowchart-0-code\" style=\"display: none\">st=>start: Start|past:>http://www.google.com[blank]\ne=>end: End:>http://www.google.com\nop1=>operation: My Operation|past\nop2=>operation: Stuff|current\nsub1=>subroutine: My Subroutine|invalid\ncond=>condition: Yes\nor No?|approved:>http://www.google.com\nc2=>condition: Good idea|rejected\nio=>inputoutput: catch something...|request\n\nst->op1(right)->cond\ncond(yes, right)->c2\ncond(no)->sub1(left)->op1\nc2(yes)->io->e\nc2(no)->op2->e</textarea><textarea id=\"flowchart-0-options\" style=\"display: none\">{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12,\"theme\":\"simple\"}</textarea><script>  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);</script></p>\n</blockquote>\n<p>🍀From Clover <a href=\"https://aprilsx.github.io/2018/03/19/sprouting180319b/\">https://aprilsx.github.io/2018/03/19/sprouting180319b/</a> </p>\n","categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":3,"path":"api/tags/sprouting.json"}]}