{"title":"一些关于Java要记住的话","slug":"sprouting180319b","date":"2018-03-19T08:44:36.000Z","updated":"2018-04-04T04:58:44.000Z","comments":true,"path":"api/articles/sprouting180319b.json","photos":[],"link":"","excerpt":"❤Data类名用大驼峰，属性用小驼峰（对于java来说，大小写非常重要）源代码的文件名必须与公共类的名字相同，并用.java作为扩展名每个java应用程序必须有一个main函数","covers":["/images/sprouting180319b_1.png"],"content":"<p style=\"text-align: center;\">❤</p>\n\n<ul>\n<li><b>Data</b><ol>\n<li>类名用大驼峰，属性用小驼峰（对于java来说，大小写非常重要）</li>\n<li>源代码的文件名必须与公共类的名字相同，并用.java作为扩展名</li>\n<li>每个java应用程序必须有一个main函数   <a id=\"more\"></a></li>\n<li>每个句子必须以分号结束</li>\n<li>不要担心你注释的代码会膨胀你的可执行代码</li>\n<li>Java是一种强类型语言，记住数据类型的大小很重要。Java没有任何无符号形式的整型，这是因为Java跨平台的原因，规定了数值类型所占据的字节数量与平台无关</li>\n<li>16进制：0x; 2进制：0b; float：f; double：d（建议不使用8进制，8进制数前缀为0，不好区分;16进制可以表示浮点数，如0.125可表示为0x1.0p-3）</li>\n<li>从Java7以后，数字字面量中能够添加下划线，如1_000等价于1000</li>\n<li>浮点数值不适合用于无法接受舍入误差的金融计算中。如果不允许任何舍入误差情况存在，就应该使用BigDecimal类</li>\n<li>Java有一个能够表示任意精度的算术包，通常称为“大数值”——big number，一个Java对象</li>\n<li>‘A’和”A”是不一样的</li>\n<li>由于Unicode编码的原因，注释中\\u的使用一定要注意</li>\n<li>强烈建议不要在程序中使用char类型，除非确实需要处理UTF-16代码单元。最好将字符串作为抽象数据类型处理</li>\n<li>不要在boolean类型与任何数值类型之间进行强制转换转换</li>\n<li>建议不要在表达式中使用++来进行自增运算，这样容易使人困惑</li>\n<li>三元操作符有时蛮有用的</li>\n<li>我感觉位运算蛮好用的，以后可以尝试下从这个角度出发思考数字处理问题</li>\n<li>枚举类型对数据做了有限集合的限定</li>\n<li>Java文档中将String类对象称为不可变字符串</li>\n<li>不可变字符串有个优点：编译器可以让字符串共享</li>\n<li>Java中原始字符串是放置在堆中的，系统将会自动回收一块不再使用的内存</li>\n<li>空串是长度为0的字符串，检验空串的方法<code>if(str.length() == 0)</code>或<code>if(str.equals(&quot;&quot;))</code></li>\n<li>String可以存放一个特殊值null，这表示目前没有任何对象与该变量关联，检验方法<code>if(str == null)</code></li>\n<li><code>if(str != null &amp;&amp; str.length() != 0)</code>一般非空判断常用处理</li>\n<li>Date相关格式化选项以t开始，如<code>%tc,%tB,%te,%tY</code></li>\n<li>理解参数索引的意义，如<code>System.out.printf(“%1$s %2$tB %2$te %2$tY”,”Due date:”,new Date());</code>中%1$表示”Due date:”,%2$表示Date()实例化的对象。<a href=\"https://deerchao.net/tutorials/regex/regex.htm\" target=\"_blank\" rel=\"noopener\">原理同正则表达式</a></li>\n<li>大数值理解相关<a href=\"https://blog.csdn.net/qfikh/article/details/52832196\" target=\"_blank\" rel=\"noopener\">参考1</a>，<a href=\"https://blog.csdn.net/u014115273/article/details/52522629\" target=\"_blank\" rel=\"noopener\">参考2</a></li>\n<li>Java中数组的创建与C++是一样的，但是创建的是不可变数组，这与String类相似</li>\n<li>Arrays.toString()是个很好的方法，可以打印数组。Arrays.deepToString()可以打印二维数组</li>\n<li>Java中的[]运算符被定义为检查数组边界，而且没有指针运算，即不能通过a加1得到数组的下一个元素</li>\n<li>Java数组的特别之处在于数组的嵌套，所以被称为“数组的数组”。如创建二维数组时，其实它创建的是一个指针数组，我们想要互换两行的话很简单，只要将代表该两行的首地址进行交换就可以了</li>\n<li>时间是用距离一个固定时间点的毫秒数表示的，这个点就是纪元</li>\n<li>Date类表示钟表时间，LocalDate类表示历法时间。将时间与日期分开是一种很好的面向对象设计</li>\n<li>更改器会造成对象状态的改变，如GregorianCalendar.add()，是在该日期上做加法</li>\n<li>访问器不会造成对象状态的改变，如LocalDate.plusDays()，是创建了一个新的加过天数后的对象</li>\n</ol>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li><b>数据类型快查表</b></li>\n</ul>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">存储需求/字节</th>\n<th style=\"text-align:left\">思维映射</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>整型</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">最常用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">特定场合，如底层文件处理或控制占用存储空间量的大数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">地球上所有人口加起来都没它大,长整型数值有一个后缀L或l。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">特定场合，同上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>浮点型</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">在很多情况下，float的精度很难满足需求，一般需要单精度或存储大量数据才会用到。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">常用</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p><img src=\"/images/sprouting180319b_1.png\" alt=\"\"></p>\n<ul>\n<li><p><b>Variable</b></p>\n<ol>\n<li>变量名必须是一个以字母开头，每个字符都是有意义的，并且大小写敏感</li>\n<li>变量名基本上没有长度限制，你自己肯定也不会起太长的变量名</li>\n<li>不提倡多个变量同时声明，逐一声明每个变量可以提高程序的可读性</li>\n<li>你声明了一个变量之后，记得进行初始化，要不后面用的时候会报错</li>\n<li>Java中，变量的声明尽可能地靠近变量第一次使用的地方，这是一种良好的编程风格</li>\n<li>用final修饰的变量只能被赋值一次，即表示常量。常量名使用全大写，中间可以加下划线_</li>\n<li>必须用final定义常量</li>\n<li>类常量定义于main函数的外面</li>\n</ol>\n</li>\n<li><p><b>运算符</b></p>\n<ol>\n<li>整数被0除将会产生一个异常，而浮点数被0除将会得到无穷大或NaN结果</li>\n<li>strictfp关键字标记的方法必须使用严格的浮点计算来生成可再生的结果。如：<code>public static strictfp</code>，main函数中所有的指令都将使用严格计算。如果strictfp标记了一个类，那么这个类内都将进行严格的浮点运算了</li>\n<li>对于大多数程序而言，浮点溢出不是大问题，但如果是计算卫星发射，火箭回收，那可得注意了，但估计也绝对是不可能选Java去做这些，233333</li>\n<li>在java中没有幂运算，需要借助pow函数，pow(3,2) = 9</li>\n<li>floorMod函数解决一个长期存在的有关整数求余的问题。如时钟时针指向问题，-11点应指向floorMod(-11+12,12) = 1</li>\n<li>万不可使用==来检测两个字符串是否相等，要用equals或equalsIgnoreCase等方法</li>\n</ol>\n</li>\n<li><p><b>控制流程</b></p>\n<ol>\n<li>在嵌套的块中声明变量要注意，莫重名</li>\n<li>switch去掉break会直通，@Suppress Warnings(“fallthrough”)</li>\n<li>switch中的case标签可以是char,byte,short,int,并且还可以是字符串字面量了。<a href=\"https://www.zhihu.com/question/21240276\" target=\"_blank\" rel=\"noopener\">关于case constant-expression的详细解释</a></li>\n<li>foreach写法–<code>for（value : collection）statment</code>之所以没写出for(..in..)是因为System.in的原因，历史问题</li>\n<li>一个类只有一个main方法</li>\n<li>一个.java源文件中只能有一个公有类，但可以有任意数目的非公有类</li>\n<li>构造器与类同名；每个类可以有一个以上的构造器；构造器可以有0个、1个或多个参数</li>\n<li>构造器没有返回值</li>\n<li>构造器总是伴随着new操作一起调用</li>\n<li>！所有的Java对象都是在堆中构造的</li>\n<li>！Java程序设计语言对对象采用的是值调用</li>\n</ol>\n</li>\n</ul>\n<p><br></p>\n<blockquote>\n<p>  参考文献：<br>  [ 1 ] 《Java核心技术 I》- p29</p>\n</blockquote>\n<p>🍀From Clover <a href=\"https://aprilsx.github.io/2018/03/19/sprouting180319b/\">https://aprilsx.github.io/2018/03/19/sprouting180319b/</a> </p>\n","categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":11,"path":"api/tags/sprouting.json"}]}