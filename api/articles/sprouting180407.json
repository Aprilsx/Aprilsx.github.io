{"title":"Java.数组","slug":"sprouting180407","date":"2018-04-07T05:11:34.000Z","updated":"2018-04-07T09:54:09.000Z","comments":true,"path":"api/articles/sprouting180407.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p></p><p style=\"text-align: center;\">❤</p><p></p>\n<blockquote>\n<p>直接对数组是比较麻烦的，最好是利用JDK中提供的工具类进行操作。这便要求我们第一步去处理数组，将数组转换为可变对象数组，然后再进行操作会变的更加方便。但是有时候我们还需要考虑数据的安全性，因此数组转换后还是需要再考虑其处理结果的存储形势。</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"数组的排序及元素查找\"><a href=\"#数组的排序及元素查找\" class=\"headerlink\" title=\"数组的排序及元素查找\"></a>数组的排序及元素查找</h3><ul>\n<li><p>sort()</p>\n<ol>\n<li>利用Arrays工具类的sort()便可轻松实现对数组的排序。值得注意的是，该排序算法DualPivotQuicksort自JDK1.7之后再次做了优化。</li>\n<li><a href=\"https://stackoverflow.com/questions/20917617/whats-the-difference-of-dual-pivot-quick-sort-and-quick-sort\" target=\"_blank\" rel=\"noopener\">关于DualPivotQuicksort</a></li>\n</ol>\n</li>\n<li><p>parallelSort()</p>\n<ol>\n<li>并行排序在sort()再次进行了优化，主要考虑的是CPU资源占用问题。对线程的合理规划使得我们在处理大数据排序时又节省了一些时间。<a href=\"https://www.cnblogs.com/princessd8251/articles/5186704.html\" target=\"_blank\" rel=\"noopener\">大致比较结果</a></li>\n</ol>\n</li>\n<li><a href=\"https://www.cnblogs.com/whgk/p/6596787.html\" target=\"_blank\" rel=\"noopener\">Java实现7种排序</a></li>\n<li><p>binarySearch()</p>\n<ol>\n<li>在数组已排序完成的前提下！利用二分法查找能够快速获得想要查找的元素。</li>\n</ol>\n</li>\n<li><p>contains()</p>\n<ol>\n<li>查看数组中是否包含指定元素。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"数组添加元素\"><a href=\"#数组添加元素\" class=\"headerlink\" title=\"数组添加元素\"></a>数组添加元素</h3><ul>\n<li><p>System.arrayCopy()</p>\n<ol>\n<li>由于数组创建之后的空间无法自动扩容，因此需要人去干涉。利用数组复制原理，开辟更大的destination数组后，便可将source数组分段或一次性的拷贝入扩容后的destination中，实现数组元素的插入、追加、合并、扩容等。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.arraycopy(src, srcPos, dest, destPos, length);</span><br><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> length = original.length;</span><br><span class=\"line\"><span class=\"keyword\">int</span> destination[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length + <span class=\"number\">1</span>];</span><br><span class=\"line\">System.arraycopy(original, <span class=\"number\">0</span>, destination, <span class=\"number\">0</span>, index);</span><br><span class=\"line\">destination[index] = element;</span><br><span class=\"line\">System.arraycopy(original, index, destination, index + <span class=\"number\">1</span>, length - index);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"数组反转\"><a href=\"#数组反转\" class=\"headerlink\" title=\"数组反转\"></a>数组反转</h3><ul>\n<li><p>reverse()</p>\n<ol>\n<li>Collections工具类的reverse()主要操作的是List对象，所以使用前要<a href=\"https://jingyan.baidu.com/album/86f4a73e607f2937d7526972.html?picindex=2\" target=\"_blank\" rel=\"noopener\">对数组进行转化</a>，小心陷阱，参考所附文献。</li>\n</ol>\n</li>\n<li><p>reverseOrder()</p>\n<ol>\n<li>如果要对对象数组进行反序，在我们实现了一个Comparator的前提下，我们可以通过该方法获得一个反序的比较器</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"数组合并\"><a href=\"#数组合并\" class=\"headerlink\" title=\"数组合并\"></a>数组合并</h3><ul>\n<li>addAll()</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a[] = &#123; <span class=\"string\">\"A\"</span>, <span class=\"string\">\"E\"</span>, <span class=\"string\">\"I\"</span> &#125;;</span><br><span class=\"line\">String b[] = &#123; <span class=\"string\">\"O\"</span>, <span class=\"string\">\"U\"</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 数组转List</span></span><br><span class=\"line\">List list = <span class=\"keyword\">new</span> ArrayList(Arrays.asList(a));</span><br><span class=\"line\">list.addAll(Arrays.asList(b));</span><br><span class=\"line\">Object[] c = list.toArray();</span><br><span class=\"line\">System.out.println(Arrays.toString(c));</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组填充\"><a href=\"#数组填充\" class=\"headerlink\" title=\"数组填充\"></a>数组填充</h3><ul>\n<li><p>fill()</p>\n<ol>\n<li>将数组内元素进行批量的填充，填充类型可以是对象类型，在数组初始化时很方便。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"数组元素的删除\"><a href=\"#数组元素的删除\" class=\"headerlink\" title=\"数组元素的删除\"></a>数组元素的删除</h3><ul>\n<li>数组转List</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 暂时没搞懂</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] src = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">List&lt;Integer&gt; list = Arrays.stream( src ).boxed().collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<ul>\n<li>clear()清除所有List中的元素</li>\n<li>remove()删除指定元素</li>\n<li>removeAll()数组求差集</li>\n<li>retainAll()数组求交集</li>\n</ul>\n<h3 id=\"数组相等性判断\"><a href=\"#数组相等性判断\" class=\"headerlink\" title=\"数组相等性判断\"></a>数组相等性判断</h3><ul>\n<li><p>equals()</p>\n<ol>\n<li>源代码中重写了equals方法，使得数组具有了元素的判断能力。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns &#123;<span class=\"doctag\">@code</span> true&#125; if the two specified arrays of ints are</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;i&gt;equal&lt;/i&gt; to one another.  Two arrays are considered equal if both</span></span><br><span class=\"line\"><span class=\"comment\"> * arrays contain the same number of elements, and all corresponding pairs</span></span><br><span class=\"line\"><span class=\"comment\"> * of elements in the two arrays are equal.  In other words, two arrays</span></span><br><span class=\"line\"><span class=\"comment\"> * are equal if they contain the same elements in the same order.  Also,</span></span><br><span class=\"line\"><span class=\"comment\"> * two array references are considered equal if both are &#123;<span class=\"doctag\">@code</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> a one array to be tested for equality</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> a2 the other array to be tested for equality</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if the two arrays are equal</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span>[] a2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a==a2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a==<span class=\"keyword\">null</span> || a2==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a2.length != length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ArraysSupport.mismatch(a, a2, length) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<p><br></p>\n<blockquote>\n<p>  参考文献：<br>  [ 1 ] <a href=\"https://www.cnblogs.com/princessd8251/articles/5186704.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/princessd8251/articles/5186704.html</a><br>  [ 2 ] <a href=\"https://www.cnblogs.com/whgk/p/6596787.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/whgk/p/6596787.html</a><br>  [ 3 ] <a href=\"https://blog.csdn.net/ke_zhang_123/article/details/75968907\" target=\"_blank\" rel=\"noopener\">asList存在的问题</a><br>  [ 4 ] <a href=\"https://blog.csdn.net/chenleixing/article/details/43775127\" target=\"_blank\" rel=\"noopener\">关于Arrays.asList你一定要知道的陷阱</a><br><br></p>\n</blockquote>\n<p>🍀From Clover <a href=\"https://aprilsx.github.io/2018/04/07/sprouting180407/\">https://aprilsx.github.io/2018/04/07/sprouting180407/</a> </p>\n","categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":10,"path":"api/tags/sprouting.json"}]}