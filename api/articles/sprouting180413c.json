{"title":"Java.集合","slug":"sprouting180413c","date":"2018-04-13T09:43:24.000Z","updated":"2018-04-14T05:49:15.000Z","comments":true,"path":"api/articles/sprouting180413c.json","photos":[],"link":"","excerpt":null,"covers":["images/sprouting180413c_1.png"],"content":"<p></p><p style=\"text-align: center;\">❤</p><br><br><p></p>\n<h3 id=\"集合的出现是用来解决什么问题？\"><a href=\"#集合的出现是用来解决什么问题？\" class=\"headerlink\" title=\"集合的出现是用来解决什么问题？\"></a>集合的出现是用来解决什么问题？</h3><p>在实现方法的过程中，选择不同的数据结构会导致我们的实现风格以及性能存在着很大差异。所以在选择数据结构的时候，我们往往会考虑以下一些问题:</p>\n<ul>\n<li>我们需要快速地搜索成千上万的有序的数据项吗？</li>\n<li>我们需要快速地在有序的序列中间插入元素或删除元素吗？</li>\n<li>我们需要建立键与值之间的关联吗？</li>\n<li>…</li>\n</ul>\n<p><br></p>\n<h3 id=\"数据结构的相关知识\"><a href=\"#数据结构的相关知识\" class=\"headerlink\" title=\"数据结构的相关知识\"></a>数据结构的相关知识</h3><ol>\n<li><a href=\"https://blog.csdn.net/juanqinyang/article/details/51354293\" target=\"_blank\" rel=\"noopener\">参看“yang蜗牛”的博客了解队列——队列(queue)</a>。队列的两种实现分别是:<ul>\n<li>循环队列<br>  基于循环队列实现的循环数组是一个有界集合，即容量有限。</li>\n<li>链表<br>  基于链式队列实现的链表，不需要考虑队列是否已满，只要内存足够就可以一直分配空间。如果程序中要收集的对象数量没有上限，就最好使用链表。</li>\n</ul>\n</li>\n<li><a href=\"https://blog.csdn.net/kay5804/article/details/5925555\" target=\"_blank\" rel=\"noopener\">参看“jspwind”的博客了解散列-散列(hash)</a><ul>\n<li>散列表(hashtable)可以快速查找所需要的对象</li>\n<li>散列表为每个对象计算了一个整数，称为散列码(hash code)</li>\n<li>在Java中，散列表用链表数组实现，每个列表被称为桶(bucket)</li>\n<li>桶数指的是用于收集具有相同散列值的数目<br>如果想要查找表中对象的位置，就要先计算它的散列码，然后与桶的总数取余得到保存这个元素的桶的索引，最后就可以很快找到这个元素了。这就是散列的用处。</li>\n</ul>\n</li>\n</ol>\n<p><br></p>\n<h3 id=\"迭代器（Iterator）\"><a href=\"#迭代器（Iterator）\" class=\"headerlink\" title=\"迭代器（Iterator）\"></a>迭代器（Iterator）</h3><ol>\n<li>迭代器对元素的访问顺序取决于被访问集合的类型，如ArrayList的访问是顺序的，又如HashSet的访问是无序的</li>\n<li>Iterator与Enumeration有类似方法，它们作用是一样的，但更多人喜欢Iterator，因为名字短</li>\n<li>Java迭代器中的查找操作与位置变更是紧密相连的，可以将Java迭代器认为是位于两个元素之间。当调用next时，迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</li>\n<li>有个有用的推论是，可以将Iterator.next与InputStream.read看作为等效的。从数据流中读取一个字节，都会会自动地“消耗掉”这个字节。</li>\n<li>在Java中，参照第3点，迭代器的操作类似于“光标”的操作，绘制迭代器示意图对于理解迭代器的操作逻辑很有帮助</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">迭代器示意图例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">/ABC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A/BC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AX/BC</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对应迭代器示意图的代码实现部分</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; a = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    a.add(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">    a.add(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">    a.add(<span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取迭代器</span></span><br><span class=\"line\">    ListIterator&lt;String&gt; aIter = a.listIterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( aIter.hasNext() ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( aIter.hasNext() ) &#123;</span><br><span class=\"line\">            aIter.next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        aIter.add(<span class=\"string\">\"X\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"集合框架中接口的继承关系\"><a href=\"#集合框架中接口的继承关系\" class=\"headerlink\" title=\"集合框架中接口的继承关系.\"></a>集合框架中接口的继承关系.</h3><p><a href=\"https://www.cnblogs.com/jing99/p/7057245.html\" target=\"_blank\" rel=\"noopener\">图片引用“kosamino”的博客</a><br><a href=\"https://www.cnblogs.com/jing99/p/7057245.html\" target=\"_blank\" rel=\"noopener\"><img src=\"images/sprouting180413c_1.png\" alt=\"\"></a></p>\n<p><br></p>\n<blockquote>\n<p>  参考文献：<br>  [ 1 ] Java核心技术I p345-<br>  [ 2 ] <a href=\"https://blog.csdn.net/juanqinyang/article/details/51354293\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/juanqinyang/article/details/51354293</a><br><br></p>\n</blockquote>\n<p>🍀From Clover <a href=\"https://aprilsx.github.io/2018/04/13/sprouting180413c/\">https://aprilsx.github.io/2018/04/13/sprouting180413c/</a> </p>\n","categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":17,"path":"api/tags/sprouting.json"}]}