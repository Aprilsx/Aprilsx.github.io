{"title":"Java.代理模式(Proxy)","slug":"sprouting180413","date":"2018-04-13T02:30:30.000Z","updated":"2018-04-13T06:45:55.000Z","comments":true,"path":"api/articles/sprouting180413.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p></p><p style=\"text-align: center;\">❤</p><p></p>\n<h3 id=\"代理模式是什么？\"><a href=\"#代理模式是什么？\" class=\"headerlink\" title=\"代理模式是什么？\"></a>代理模式是什么？</h3><blockquote>\n<p>代理(Proxy)是一种设计模式，提供了对目标对象另外的访问方式；即通过代理对象访问目标对象。这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。</p>\n<p>这里使用到编程中的一个思想：不要随意去修改别人已经写好的代码或者方法，如果需改修改，可以通过代理的方式来扩展该方法</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><blockquote>\n<p>静态代理在使用时,需要定义接口或者父类,被代理对象与代理对象一起实现相同的接口或者是继承相同父类.</p>\n<ul>\n<li>实现思路<ol>\n<li>创建公共父类或接口，使代理人和被代理人具有公共方法</li>\n<li>代理类中设置方法获取被代理对象</li>\n<li>代理类中重写被代理类中需要被扩展或更改的方法</li>\n<li>应用时，将被代理对象作为参数传递给代理对象，完成代理</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>代码部分<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Part.1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IUserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Part.2 and .3</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> <span class=\"keyword\">implements</span> <span class=\"title\">IUserDao</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Run as 10km/h! Too slow!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IUserDao</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用父类或接口来接受对象，降低耦合度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IUserDao target;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserDaoProxy</span><span class=\"params\">(IUserDao target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        target.run();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Propxy high up the speed to 20km/h! Fine!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Part.4</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    UserDaoProxy proxy = <span class=\"keyword\">new</span> UserDaoProxy(<span class=\"keyword\">new</span> UserDao());</span><br><span class=\"line\">        proxy.run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"动态代理（JDK代理、接口代理）\"><a href=\"#动态代理（JDK代理、接口代理）\" class=\"headerlink\" title=\"动态代理（JDK代理、接口代理）\"></a>动态代理（JDK代理、接口代理）</h3><blockquote>\n<p>动态代理的代理对象不需要实现接口，它是通过JDK的API，动态的在内存中构建代理对象(需要我们指定创建代理对象／目标对象实现的接口的类型)</p>\n<p>动态代理中用到了invoke()，这是反射方面的知识，如果对反射机制没有一个认识的话，动态代理部分逻辑的实现会比较难理解！</p>\n</blockquote>\n<ul>\n<li><p>实现思路</p>\n<ol>\n<li>创建公共父类或接口，使代理人和被代理人具有公共方法</li>\n<li>设计代理工厂类，提供获取代理对象的方法。方法中主要利用Proxy.newProxyInstance()去创建代理实例，并实现对被代理类功能的重写或扩展</li>\n<li>创建被代理对象，通过代理工厂类获取代理对象，调用代理方法，完成代理</li>\n</ol>\n</li>\n<li><p>代码部分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Part.1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IUserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Part.2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyFactory</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxyInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(</span><br><span class=\"line\">                <span class=\"comment\">// 参数1: loader</span></span><br><span class=\"line\">                <span class=\"comment\">// 为了获得原对象的类加载器</span></span><br><span class=\"line\">                target.getClass().getClassLoader(), </span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 参数2: interfaces</span></span><br><span class=\"line\">                <span class=\"comment\">// 为了获得原对象所实现的接口类型</span></span><br><span class=\"line\">                target.getClass().getInterfaces(), </span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 参数3: new InvocationHandler</span></span><br><span class=\"line\">                <span class=\"comment\">// 事件处理器</span></span><br><span class=\"line\">                <span class=\"comment\">// 执行目标对象的方法时,会触发事件处理器的方法,会把当前执行目标对象的方法作为参数传入</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvocationHandler() &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"执行目标对象的方法并扩展\"</span>);</span><br><span class=\"line\">                        Object returnValue = method.invoke(target, args);</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Propxy high up the speed to 20km/h! Fine!\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Part.3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    UserDao target = <span class=\"keyword\">new</span> UserDao();</span><br><span class=\"line\">    System.out.println(target.getClass());</span><br><span class=\"line\">    </span><br><span class=\"line\">    IUserDao proxy = (IUserDao) <span class=\"keyword\">new</span> ProxyFactory(target).getProxyInstance();</span><br><span class=\"line\">    System.out.println(proxy.getClass());</span><br><span class=\"line\">    </span><br><span class=\"line\">    proxy.run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"Cglib代理（子类代理）\"><a href=\"#Cglib代理（子类代理）\" class=\"headerlink\" title=\"Cglib代理（子类代理）\"></a>Cglib代理（子类代理）</h3><ul>\n<li><a href=\"https://www.cnblogs.com/cenyu/p/6289209.html\" target=\"_blank\" rel=\"noopener\">请进入传送门</a></li>\n</ul>\n<p><br></p>\n<blockquote>\n<p>  参考文献：<br>  [ 1 ] <a href=\"https://www.cnblogs.com/cenyu/p/6289209.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/cenyu/p/6289209.html</a><br>  [ 2 ] Java核心技术I p190-207<br><br></p>\n</blockquote>\n<p>🍀From Clover <a href=\"https://aprilsx.github.io/2018/04/13/sprouting180413/\">https://aprilsx.github.io/2018/04/13/sprouting180413/</a> </p>\n","categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":17,"path":"api/tags/sprouting.json"}]}