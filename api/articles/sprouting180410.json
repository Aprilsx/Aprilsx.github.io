{"title":"Java.方法","slug":"sprouting180410","date":"2018-04-10T12:05:20.000Z","updated":"2018-04-13T01:41:49.000Z","comments":true,"path":"api/articles/sprouting180410.json","photos":[],"link":"","excerpt":"❤关于方法<br>什么是方法？编程语言中所说的方法，指的是能够处理事务的代码块。一般具有独立性，重用性，封装性等特点。C语言中叫它函数，Java中叫它方法。在面向对象的编程思想中，你也可以理解它为一种功能，编程者的你就好比上帝，你想让鸟会飞，便给它翅膀；你想让鱼会有，便给它尾鳍。<br>方法长什么样子？1<br>2<br>3<br>4<br>5<br>修饰符  返回值类型  方法名（参数类型1 参数1, 参数类型2 参数2, ...）&#123;<br>    执行语句<br>    ...<br>    return 返回值;<br>&#125;<br>最经典的便是main这个方法了<br>1<br>2<br>3<br>4<br>public static void main(String[] args) &#123;<br>    System.out.println(\"给鸟按翅膀，给鱼按鳍。\");<br>    // return;<br>&#125;<br>所以方法里我们要关心下这些地方:修饰符对访问权限进行限定。本质就是谁可以用，谁不能用的问题。控制内存空间区域存储的分配。返回值类型用于限定方法的返回值的数据类型。方法名起名字是有讲究的，比如setXXX，getXXX，构造器方法等等…参数类型用于接收调用方法时传入的数据return关键字用于结束方法以返回给调用者，在适当的时候可以提前结束。返回值被return返回的值，值就给了调用者。<br><br>","covers":["/images/sprouting180410_1.png"],"content":"<p></p><p style=\"text-align: center;\">❤</p><p></p>\n<h1 id=\"关于方法\"><a href=\"#关于方法\" class=\"headerlink\" title=\"关于方法\"></a>关于方法</h1><p><br></p>\n<h3 id=\"什么是方法？\"><a href=\"#什么是方法？\" class=\"headerlink\" title=\"什么是方法？\"></a>什么是方法？</h3><blockquote>\n<p>编程语言中所说的方法，指的是能够处理事务的代码块。一般具有独立性，重用性，封装性等特点。C语言中叫它函数，Java中叫它方法。在面向对象的编程思想中，你也可以理解它为一种功能，编程者的你就好比上帝，你想让鸟会飞，便给它翅膀；你想让鱼会有，便给它尾鳍。</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"方法长什么样子？\"><a href=\"#方法长什么样子？\" class=\"headerlink\" title=\"方法长什么样子？\"></a>方法长什么样子？</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符  返回值类型  方法名（参数类型<span class=\"number\">1</span> 参数<span class=\"number\">1</span>, 参数类型<span class=\"number\">2</span> 参数<span class=\"number\">2</span>, ...）&#123;</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 返回值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最经典的便是main这个方法了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"给鸟按翅膀，给鱼按鳍。\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// return;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以方法里我们要关心下这些地方:</p>\n<ul>\n<li>修饰符<ul>\n<li>对访问权限进行限定。本质就是谁可以用，谁不能用的问题。</li>\n<li>控制内存空间区域存储的分配。</li>\n</ul>\n</li>\n<li>返回值类型<ul>\n<li>用于限定方法的返回值的数据类型。</li>\n</ul>\n</li>\n<li>方法名<ul>\n<li>起名字是有讲究的，比如setXXX，getXXX，构造器方法等等…</li>\n</ul>\n</li>\n<li>参数类型<ul>\n<li>用于接收调用方法时传入的数据</li>\n</ul>\n</li>\n<li>return关键字<ul>\n<li>用于结束方法以返回给调用者，在适当的时候可以提前结束。</li>\n</ul>\n</li>\n<li>返回值<ul>\n<li>被return返回的值，值就给了调用者。</li>\n</ul>\n</li>\n</ul>\n<p><br><br><a id=\"more\"></a><br><br></p>\n<h1 id=\"Java中的方法\"><a href=\"#Java中的方法\" class=\"headerlink\" title=\"Java中的方法\"></a>Java中的方法</h1><p><br></p>\n<h3 id=\"Java-方法-重载（Overloading\"><a href=\"#Java-方法-重载（Overloading\" class=\"headerlink\" title=\"Java.方法.重载（Overloading\"></a>Java.方法.重载（Overloading</h3><blockquote>\n<ul>\n<li><p>关于这个“重载”的“重”读2生chong，还是读4声zhong?</p>\n<p><a href=\"https://www.zhihu.com/question/27985587\" target=\"_blank\" rel=\"noopener\">知乎上论了半天，你可以点开传送门看看。</a>但我个人觉得，一语双关更有利于我们理解这个词在Java方法中所占据的作用及含义。</p>\n<ol>\n<li>读2声；说明JVM在碰到构造器的名字的时候会有多种选择，所以每次都需要根据方法标识重新选择该用哪一个，所以这么读</li>\n<li>读4声；对于一个类而言，有多个构造器岂不是很重吗？好比一辆重型机甲，各种变换形态都有，这么理解也很对嘛</li>\n</ol>\n<p>main方法也可以被重载</p>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"/images/sprouting180410_1.png\" alt=\"\"></p>\n<ul>\n<li>什么是重载？<ul>\n<li>Java允许在一个程序中定义多个名称相同的方法，但是参数的类型或个数必须不同。这就是方法的重载。</li>\n</ul>\n</li>\n<li>理解重载的关键是理解方法的签名，什么是方法的签名？<ul>\n<li>为了去描述一个方法，光有方法名是不够的，还需要指出每个参数的类型，而这些加起来便构成了方法的签名。C语言中函数的声明，声明的就是方法的签名！</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"汉诺塔\"><a href=\"#汉诺塔\" class=\"headerlink\" title=\"汉诺塔\"></a>汉诺塔</h3><ul>\n<li>关于汉诺塔算法，精髓就是“把大象装进冰箱门，首先打开冰箱门，把大象放进去，把冰箱门关上”。<a href=\"https://www.zhihu.com/question/24385418\" target=\"_blank\" rel=\"noopener\">知乎的传送门在这里，想要探讨的请移步。</a><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 代码案例来自Runoob，可以试着用装大象的方法套一下，一样一样的。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nDisks = <span class=\"number\">3</span>;</span><br><span class=\"line\">        doTowers(nDisks, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">doTowers</span><span class=\"params\">(<span class=\"keyword\">int</span> topN, <span class=\"keyword\">char</span> from, <span class=\"keyword\">char</span> inter, <span class=\"keyword\">char</span> to)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (topN == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Disk 1 from \"</span></span><br><span class=\"line\">            + from + <span class=\"string\">\" to \"</span> + to);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            doTowers(topN - <span class=\"number\">1</span>, from, to, inter);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Disk \"</span></span><br><span class=\"line\">            + topN + <span class=\"string\">\" from \"</span> + from + <span class=\"string\">\" to \"</span> + to);</span><br><span class=\"line\">            doTowers(topN - <span class=\"number\">1</span>, inter, from, to);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"Java-方法-重写（Overriding）\"><a href=\"#Java-方法-重写（Overriding）\" class=\"headerlink\" title=\"Java.方法.重写（Overriding）\"></a>Java.方法.重写（Overriding）</h3><ul>\n<li>如果子类中有和父类方法签名一样的方法，那么可以说子类的方法覆盖了父类的方法，这就是方法的重写。方法的重写可以继承并扩展父类方法，也可以重新写子类特有的方法，是实现多态的重要特性。</li>\n</ul>\n<p><br></p>\n<h3 id=\"Java-方法-instanceof\"><a href=\"#Java-方法-instanceof\" class=\"headerlink\" title=\"Java.方法.instanceof\"></a>Java.方法.instanceof</h3><ul>\n<li>instanceof是一个二元操作符。用来判断一个对象是否属于某类的一个实例。<a href=\"https://www.zhihu.com/question/21574535\" target=\"_blank\" rel=\"noopener\">不敢展开，太复杂，详情看这里</a></li>\n<li>也可以用来检查一个对象是否实现了某个特定的接口<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Playground</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        A a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        B b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">        System.out.println(a <span class=\"keyword\">instanceof</span> Comparable); <span class=\"comment\">// 返回true</span></span><br><span class=\"line\">        System.out.println(b <span class=\"keyword\">instanceof</span> Comparable); <span class=\"comment\">// 返回false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">A</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(A arg0)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"Java-方法-break\"><a href=\"#Java-方法-break\" class=\"headerlink\" title=\"Java.方法.break\"></a>Java.方法.break</h3><ul>\n<li>break语句可以直接强行退出当前的循环，忽略循环体中任何其他语句和循环条件测试。</li>\n</ul>\n<p><br></p>\n<h3 id=\"Java-方法-continue\"><a href=\"#Java-方法-continue\" class=\"headerlink\" title=\"Java.方法.continue\"></a>Java.方法.continue</h3><ul>\n<li>continue语句用来结束当前循环，并进入下一次循环，即仅仅这一次循环结束了，不是所有循环结束了，后边的循环依旧进行。</li>\n</ul>\n<p><br></p>\n<h3 id=\"Java-方法-标签（Label）\"><a href=\"#Java-方法-标签（Label）\" class=\"headerlink\" title=\"Java.方法.标签（Label）\"></a>Java.方法.标签（Label）</h3><ul>\n<li><a href=\"https://blog.csdn.net/u010376788/article/details/51583363\" target=\"_blank\" rel=\"noopener\">Label主要用于标记循环代码块，配合continue，break关键字实现终止循环的作用。</a></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Outer loop checks if number is multiple of 2  </span></span><br><span class=\"line\">OUTER:  <span class=\"comment\">//outer label  </span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;  </span><br><span class=\"line\">    INNER:  <span class=\"comment\">//inter label  </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++)&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Even number: \"</span> + i + <span class=\"string\">\", break  from INNER label\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">break</span> OUTER;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"Java-方法-enum\"><a href=\"#Java-方法-enum\" class=\"headerlink\" title=\"Java.方法.enum\"></a>Java.方法.enum</h3><p>先来开一段代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Size</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SMALL(<span class=\"string\">\"S\"</span>),MEDIUM(<span class=\"string\">\"M\"</span>),LARGE(<span class=\"string\">\"L\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String abbreviation;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Size</span><span class=\"params\">(String abbreviation)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.abbreviation = abbreviation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAbbreviation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> abbreviation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>其实，<code>public enum Size{ SMALL ,MEDIUM ,LARGE}</code>声明定义的类型是一个类，它刚好有3个实例。如果需要的话，可以在枚举类型中添加一些构造器、方法和域。当然，构造器只是在构造枚举常量的时候被调用，如上代码所示。</li>\n<li><code>Size.values()</code>能够返回所有枚举值</li>\n<li><code>Size.MEDIUM.ordinal()</code>能够返回该枚举常量的位置，在枚举中，位置是从0开始计数的。</li>\n</ul>\n<p><br></p>\n<h3 id=\"Java-方法-Varargs\"><a href=\"#Java-方法-Varargs\" class=\"headerlink\" title=\"Java.方法.Varargs\"></a>Java.方法.Varargs</h3><ul>\n<li>Varargs是可变参数的意思。<a href=\"https://blog.csdn.net/hzh_csdn/article/details/56279588\" target=\"_blank\" rel=\"noopener\">与数组参数有一定差别。</a><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 传参这里注意一下</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum1 = sumvarargs(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum2 = sumvarargs(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"sum1 = \"</span>+sum1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"sum2 = \"</span>+sum2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sumvarargs</span><span class=\"params\">(<span class=\"keyword\">int</span>... intArrays)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum, i;</span><br><span class=\"line\">    sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt; intArrays.length; i++) &#123;</span><br><span class=\"line\">        sum += intArrays[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(sum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<blockquote>\n<p>  参考文献：<br>  [ 1 ] <a href=\"https://www.zhihu.com/question/27985587\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/27985587</a><br>  [ 2 ] Java核心技术卷I p123,p188<br>  [ 3 ] <a href=\"https://www.zhihu.com/question/24385418\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24385418</a><br>  [ 4 ] <a href=\"https://www.zhihu.com/question/21574535\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/21574535</a><br>  [ 5 ] <a href=\"https://blog.csdn.net/u010376788/article/details/51583363\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010376788/article/details/51583363</a><br><br></p>\n</blockquote>\n<p>🍀From Clover <a href=\"https://aprilsx.github.io/2018/04/10/sprouting180410/\">https://aprilsx.github.io/2018/04/10/sprouting180410/</a> </p>\n","categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":17,"path":"api/tags/sprouting.json"}]}