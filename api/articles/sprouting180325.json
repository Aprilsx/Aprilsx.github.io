{"title":"类设计技巧","slug":"sprouting180325","date":"2018-03-25T03:32:48.000Z","updated":"2018-03-25T05:17:14.000Z","comments":true,"path":"api/articles/sprouting180325.json","photos":[],"link":"","excerpt":null,"covers":["/images/sprouting180325_1.png"],"content":"<p style=\"text-align: center;\">❤</p>\n\n<p><img src=\"/images/sprouting180325_1.png\" alt=\"\"></p>\n<h2 id=\"不用记，变成习惯就好\"><a href=\"#不用记，变成习惯就好\" class=\"headerlink\" title=\"不用记，变成习惯就好\"></a>不用记，变成习惯就好</h2><ul>\n<li>一定要保证数据私有<ul>\n<li>这是最重要的；绝对不要破坏封装性。有时候，需要编写一个访问器方法或更改器方法，但是最好还是保持实例域的私有性。很多惨痛的经验告诉我们，数据的表示形式很可能会改变，但它们的使用方式却不会经常发生变化。当数据保持私有时，它们的表示形式的变化不会对类的使用者产生影响，即使出现bug也易于检测。</li>\n</ul>\n</li>\n<li>一定要对数据初始化</li>\n<li>不要在类中使用过多的基本类型<ul>\n<li>如果存在多个属性具有一定联系的情况，最好将这几个属性构建成对象，以方便使用</li>\n</ul>\n</li>\n<li>不是所有的域都需要独立的域访问器和域更改器</li>\n<li>将职责过多的类进行分解</li>\n<li>类名和方法名要能够体现它们的职责</li>\n<li>优先使用不可变的类<ul>\n<li>更改对象的问题在于，如果多个线程试图同时更新一个对象，就会发生并发更改。其结果是不可预料的。如果类是不可变的，就可以安全地在多个线程间共享其对象</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<blockquote>\n<p>  参考文献：<br>  [ 1 ] 《Java核心技术 I》- p144<br><br></p>\n</blockquote>\n<p>🍀From Clover <a href=\"https://aprilsx.github.io/2018/03/25/sprouting180325/\">https://aprilsx.github.io/2018/03/25/sprouting180325/</a> </p>\n","categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":5,"path":"api/tags/sprouting.json"}]}