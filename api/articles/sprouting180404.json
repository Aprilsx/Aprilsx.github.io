{"title":"Java.字符串","slug":"sprouting180404","date":"2018-04-03T16:02:15.000Z","updated":"2018-04-04T04:53:30.000Z","comments":true,"path":"api/articles/sprouting180404.json","photos":[],"link":"","excerpt":"❤字符串的比较compareTo() 和 compareToIgnoreCase()  两个字符数组依次从前开始比较，如果对象位置出现字符不同则返回两个字符的编码之差，后面的字符不再比较；如果两个字符数组的长度不一样，并且较短的数组和较长数组所有对应位置的字符都相同，则返回两个数组的长度之差。“==”  利用“==”进行比较，如果比较的是基本类型，由于自动拆装箱的机制的存在，故能够直接比较两个值的大小。如:1<br>2<br>3<br>int i = 2;<br>Integer j = 2;<br>System.out.println(i==j);  //返回true<br>","covers":null,"content":"<p></p><p style=\"text-align: center;\">❤</p><p></p>\n<h3 id=\"字符串的比较\"><a href=\"#字符串的比较\" class=\"headerlink\" title=\"字符串的比较\"></a>字符串的比较</h3><ul>\n<li><p>compareTo() 和 compareToIgnoreCase()  </p>\n<ol>\n<li>两个字符数组依次从前开始比较，如果对象位置出现字符不同则返回两个字符的编码之差，后面的字符不再比较；</li>\n<li>如果两个字符数组的长度不一样，并且较短的数组和较长数组所有对应位置的字符都相同，则返回两个数组的长度之差。</li>\n</ol>\n</li>\n<li><p>“==”  </p>\n<ol>\n<li>利用“==”进行比较，如果比较的是基本类型，由于自动拆装箱的机制的存在，故能够直接比较两个值的大小。如:<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\">Integer j = <span class=\"number\">2</span>;</span><br><span class=\"line\">System.out.println(i==j);  <span class=\"comment\">//返回true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<a id=\"more\"></a>\n<pre><code>2. 如果比较的是对象类型，由于“==”只能用来比较对象的引用，故无法再用于比较值了。\n</code></pre><ul>\n<li><p>equals()</p>\n<ol>\n<li><p>由于String类重写了equals()方法，如下源码所示，因此能够进行值的比较。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == anObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        String aString = (String)anObject;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (coder() == aString.coder()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isLatin1() ? StringLatin1.equals(value, aString.value)</span><br><span class=\"line\">                              : StringUTF16.equals(value, aString.value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>而StringBuffer和StringBuilder的equals()方法等价于“==”，不具备值的比较能力</p>\n</li>\n</ol>\n</li>\n<li><p>regionMatches()</p>\n<ol>\n<li>比较两个字符串中各自的某个相同区域内，内容是否相同</li>\n<li>设置第一个参数能够控制比较时忽略大小写<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringRegionMatchTest</span></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">      String first_str = <span class=\"string\">\"Welcome to Microsoft\"</span>;</span><br><span class=\"line\">      String second_str = <span class=\"string\">\"I work with microsoft\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> match1 = first_str.regionMatches(<span class=\"number\">11</span>, second_str, <span class=\"number\">12</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> match2 = first_str.regionMatches(<span class=\"keyword\">true</span>, <span class=\"number\">11</span>, second_str, <span class=\"number\">12</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">      <span class=\"comment\">//第一个参数 true 表示忽略大小写区别</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"区分大小写返回值：\"</span> + match1);     <span class=\"comment\">// 返回false</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"不区分大小写返回值：\"</span> + match2);    <span class=\"comment\">// 返回true</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"字符串的查找\"><a href=\"#字符串的查找\" class=\"headerlink\" title=\"字符串的查找\"></a>字符串的查找</h3><ul>\n<li><p>利用indexOf()</p>\n<ol>\n<li>在精确匹配的前提下。根据返回值进行判断，若返回值为-1，则未找到所查子串</li>\n</ol>\n</li>\n<li><p>利用正则</p>\n<ol>\n<li>写好<a href=\"http://tool.chinaz.com/regex/\" target=\"_blank\" rel=\"noopener\">正则表达式</a>，可以轻松匹配或检验字符串<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Regex is very useful for filtering Strings</span></span><br><span class=\"line\">Pattern regx = Pattern.compile(<span class=\"string\">\".*aprilsx.*\"</span>);</span><br><span class=\"line\">Matcher m = regx.matcher(<span class=\"string\">\"https://aprilsx.github.io\"</span>);</span><br><span class=\"line\">System.out.println(m.matches());    <span class=\"comment\">//高度匹配，对整个字符串进行检验。这里的结果是返回true</span></span><br><span class=\"line\"></span><br><span class=\"line\">Pattern regx = Pattern.compile(<span class=\"string\">\".*aprilsx\"</span>);</span><br><span class=\"line\">Matcher m = regx.matcher(<span class=\"string\">\"https://aprilsx.github.io\"</span>);</span><br><span class=\"line\">System.out.println(m.lookingAt());  <span class=\"comment\">// 从头开始匹配。这里的结果返回true</span></span><br><span class=\"line\"></span><br><span class=\"line\">Pattern regx = Pattern.compile(<span class=\"string\">\"aprilsx\"</span>);</span><br><span class=\"line\">Matcher m = regx.matcher(<span class=\"string\">\"https://aprilsx.github.io\"</span>);</span><br><span class=\"line\">System.out.println(m.find());   <span class=\"comment\">// 模糊查找，只要包含就行。这里结果返回true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"字符串的分割\"><a href=\"#字符串的分割\" class=\"headerlink\" title=\"字符串的分割\"></a>字符串的分割</h3><ul>\n<li><p>split()</p>\n<ol>\n<li><p>查看源代码，注意传入的参数，是正则表达式，这就让split()具有了很强大的字符串分割能力</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String[] split(String regex, <span class=\"keyword\">int</span> limit) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* fastpath if the regex is a</span></span><br><span class=\"line\"><span class=\"comment\">     (1)one-char String and this character is not one of the</span></span><br><span class=\"line\"><span class=\"comment\">        RegEx's meta characters \".$|()[&#123;^?*+\\\\\", or</span></span><br><span class=\"line\"><span class=\"comment\">     (2)two-char String and the first char is the backslash and</span></span><br><span class=\"line\"><span class=\"comment\">        the second is not the ascii digit or ascii letter.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">     </span><br><span class=\"line\">     ...</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用Pattern.split()替代String.split()能够增加效率，这是因为我们在给String.split()传入regex参数后，编译器每次都需要讲该字符串解析为正则表达式，这会使效率有所下降。不如直接创建Pattern正则对象，一次编译多次运行的好。</p>\n</li>\n</ol>\n</li>\n<li><p>StringTokenizer()</p>\n<ol>\n<li><p>查看源代码，分割符位置传入的是固定字符，这遍让StringTokenizer具有了很快的执行效率</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>   str            a string to be parsed.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>   delim          the delimiters.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>   returnDelims   flag indicating whether to return the delimiters</span></span><br><span class=\"line\"><span class=\"comment\"> *                         as tokens.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringTokenizer</span><span class=\"params\">(String str, String delim, <span class=\"keyword\">boolean</span> returnDelims)</span> </span>&#123;</span><br><span class=\"line\">    currentPosition = <span class=\"number\">0</span>;</span><br><span class=\"line\">    newPosition = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    delimsChanged = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">    maxPosition = str.length();</span><br><span class=\"line\">    delimiters = delim;</span><br><span class=\"line\">    retDelims = returnDelims;</span><br><span class=\"line\">    setMaxDelimCodePoint();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如源码所示。默认情况下，分隔符是“空格”、“制表符(‘\\t’)”、“换行符(‘\\n’)”、“回车符(‘\\r’)”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringTokenizer</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(str, <span class=\"string\">\" \\t\\n\\r\\f\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>substring(indexOf(start),indexOf(end))</p>\n<ol>\n<li>如果是处理无规律或比较复杂的字符串分割，可能这个方法能派上用场吧！</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"字符串的优化\"><a href=\"#字符串的优化\" class=\"headerlink\" title=\"字符串的优化\"></a>字符串的优化</h3><ul>\n<li><p>intern()  </p>\n<ol>\n<li>暂时没搞懂，先参考[4],[5],[6]吧！</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"字符串的格式化\"><a href=\"#字符串的格式化\" class=\"headerlink\" title=\"字符串的格式化\"></a>字符串的格式化</h3><ul>\n<li><a href=\"https://www.cnblogs.com/travellife/p/Java-zi-fu-chuan-ge-shi-hua-xiang-jie.html\" target=\"_blank\" rel=\"noopener\">“Java 字符串格式化详解” — 厉圣杰</a></li>\n</ul>\n<h3 id=\"字符串的连接\"><a href=\"#字符串的连接\" class=\"headerlink\" title=\"字符串的连接\"></a>字符串的连接</h3><ul>\n<li>“+” 为每个字符串变量赋值，公用一个内值，占用一份内存空间</li>\n<li>“StringBuffer”每次新建一个新对象，内存分配新的空间</li>\n</ul>\n<p><br></p>\n<blockquote>\n<p>  参考文献：<br>  [ 1 ] <a href=\"http://www.runoob.com/java/java-examples.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/java/java-examples.html</a><br>  [ 2 ] <a href=\"https://blog.csdn.net/taotao12312/article/details/71330815\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/taotao12312/article/details/71330815</a><br>  [ 3 ] <a href=\"http://www.cnblogs.com/gnivor/p/4386978.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/gnivor/p/4386978.html</a><br>  [ 4 ] <a href=\"https://blog.csdn.net/baidu_31657889/article/details/52315902\" target=\"_blank\" rel=\"noopener\">Java技术——你真的了解String类的intern()方法吗</a><br>  [ 5 ] <a href=\"https://www.cnblogs.com/ThinkVenus/p/6805495.html\" target=\"_blank\" rel=\"noopener\">什么是java OOM？如何分析及解决oom问题？</a><br>  [ 6 ] <a href=\"https://blog.csdn.net/seu_calvin/article/details/51404589\" target=\"_blank\" rel=\"noopener\">JVM–java虚拟机架构</a><br><br></p>\n</blockquote>\n<p>🍀From Clover <a href=\"https://aprilsx.github.io/2018/04/04/sprouting180404/\">https://aprilsx.github.io/2018/04/04/sprouting180404/</a> </p>\n","categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":8,"path":"api/tags/sprouting.json"}]}