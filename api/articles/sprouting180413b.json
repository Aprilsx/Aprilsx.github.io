{"title":"Java.反射","slug":"sprouting180413b","date":"2018-04-13T05:53:16.000Z","updated":"2018-04-13T08:50:39.000Z","comments":true,"path":"api/articles/sprouting180413b.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p></p><p style=\"text-align: center;\">❤</p><br><br><p></p>\n<h3 id=\"什么是反射？\"><a href=\"#什么是反射？\" class=\"headerlink\" title=\"什么是反射？\"></a>什么是反射？</h3><blockquote>\n<p>能够分析类能力的程序称为反射（reflection）。反射库提供了一个非常丰富且精心设计的工具类，以便编写能够动态操纵Java代码的程序。特别是在设计或运行中添加新类时，能够快速地应用开发工具动态地查询新添加类的能力。</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"反射机制可以用来做什么？\"><a href=\"#反射机制可以用来做什么？\" class=\"headerlink\" title=\"反射机制可以用来做什么？\"></a>反射机制可以用来做什么？</h3><ul>\n<li>反射是一种功能强大且复杂的机制，使用它的主要人员是工具构造者，而不是应用程序员。<ul>\n<li>在运行时分析类</li>\n<li>在运行时查看对象</li>\n<li>实现通用的数组操作代码</li>\n<li>利用Method对象</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"Class类\"><a href=\"#Class类\" class=\"headerlink\" title=\"Class类\"></a>Class类</h3><blockquote>\n<p>在程序运行期间，Java运行时系统时钟为所有的对象维护一个被称为<b>运行时</b>的类型标识。这个信息跟踪着每个对象所属的类。虚拟机利用运行时类型信息选择相应的方法执行，这些信息可以通过专门的Java类来访问，而保存这些信息的类就是Class。</p>\n</blockquote>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class对象方法测试</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">String <span class=\"built_in\">str</span> = new String();</span><br><span class=\"line\"></span><br><span class=\"line\">Class <span class=\"built_in\">className</span> = <span class=\"built_in\">str</span>.getClass();</span><br><span class=\"line\">System.out.println(<span class=\"built_in\">className</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"built_in\">className</span>.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"built_in\">className</span>.getSuperclass());</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(Arrays.<span class=\"built_in\">toString</span>(<span class=\"built_in\">className</span>.getDeclaredMethods()));</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(Arrays.<span class=\"built_in\">toString</span>(<span class=\"built_in\">className</span>.getDeclaredClasses()));</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"built_in\">className</span>.getModifiers());</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"built_in\">className</span>.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(Arrays.<span class=\"built_in\">toString</span>(<span class=\"built_in\">className</span>.getTypeParameters()));</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"built_in\">className</span>.getTypeName());</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"利用反射搞点事儿\"><a href=\"#利用反射搞点事儿\" class=\"headerlink\" title=\"利用反射搞点事儿\"></a>利用反射搞点事儿</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个例子利用反射实现了泛型数组的拷贝，很好的例子！</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">goodCopyOf</span><span class=\"params\">(Object a, <span class=\"keyword\">int</span> newLength)</span> </span>&#123;</span><br><span class=\"line\">    Class acl = a.getClass();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!acl.isArray()) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Class componetType = acl.getComponentType();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = Array.getLength(a);</span><br><span class=\"line\">    Object newArray = Array.newInstance(componetType, newLength);</span><br><span class=\"line\">    System.arraycopy(a, <span class=\"number\">0</span>, newArray, <span class=\"number\">0</span>, Math.min(length, newLength));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"调用任意方法\"><a href=\"#调用任意方法\" class=\"headerlink\" title=\"调用任意方法\"></a>调用任意方法</h3><p>在上代码之前，首先我们要清楚一个概念关于Method类。Method类类似于C语言中的函数指针，我们可以利用函数指针执行任意函数。</p>\n<ul>\n<li>假如我们已经获得了一个函数指针，那么如何去调用相对应的函数呢？这时候，反射机制就可以帮到我们，Mathod类中提供了一个invoke()方法，它便是利用反射机制来实现通过函数指针调用对应的函数。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下面是invoke()方法签名，它就长这个样子</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数1: </span></span><br><span class=\"line\"><span class=\"comment\"> *      是一个隐式参数。</span></span><br><span class=\"line\"><span class=\"comment\"> *      对于静态方法，第一个参数可以被忽略，即可以将它设置为null</span></span><br><span class=\"line\"><span class=\"comment\"> * 剩余参数:</span></span><br><span class=\"line\"><span class=\"comment\"> *      是显示参数，如果没有显示参数就传递一个null</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 好像很难理解，我们来对照着获取函数指针的方法来看调用函数指针的方法就会明白</span></span><br><span class=\"line\"><span class=\"comment\"> *      String s = \"1\";</span></span><br><span class=\"line\"><span class=\"comment\"> *      Method m = s.getClass().getMethod(name, parameterTypes);</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">invoke</span><span class=\"params\">(Object obj, Object... args)</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>现在我们知道了如何去调用函数指针对应的函数方法了。那么，另一问题？我们如何获得一个陌生类中的函数指针呢？<ol>\n<li>可以通过Class类中的getDeclareMethods方法，在返回的结果去找你想要的Method</li>\n<li>也可以通过调用这个类的getMethod方法得到</li>\n</ol>\n</li>\n</ul>\n<p><br></p>\n<blockquote>\n<p>  参考文献：<br>  [ 1 ] Java核心技术I p190-207<br><br></p>\n</blockquote>\n<p>🍀From Clover <a href=\"https://aprilsx.github.io/2018/04/13/sprouting180413b/\">https://aprilsx.github.io/2018/04/13/sprouting180413b/</a> </p>\n","categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":17,"path":"api/tags/sprouting.json"}]}