{"title":"Object:所有类的超类","slug":"sprouting180326","date":"2018-03-26T02:35:36.000Z","updated":"2018-04-04T04:56:43.000Z","comments":true,"path":"api/articles/sprouting180326.json","photos":[],"link":"","excerpt":"❤.eaquals()用于检测一个对象是否等于另外一个对象，这个方法将判断两个对象是否具有相同的引用。设计评判标准：自反性对称性传递性一致性","covers":null,"content":"<p style=\"text-align: center;\">❤</p>\n\n<h3 id=\"eaquals\"><a href=\"#eaquals\" class=\"headerlink\" title=\".eaquals()\"></a>.eaquals()</h3><p>用于检测一个对象是否等于另外一个对象，这个方法将判断两个对象是否具有相同的引用。设计评判标准：</p>\n<ul>\n<li>自反性</li>\n<li>对称性</li>\n<li>传递性</li>\n<li>一致性<a id=\"more\"></a>\n</li>\n</ul>\n<p>我们判断两个对象是否相等，主要得看这两个对象的状态是否相等。这样一来，我们一般会在类中重写equals()这个方法，以此来比较状态的一致性。<br>模版与注意事项如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YourClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">eaquals</span><span class=\"params\">(Object otherObject)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 判断引用是否相同，如果内存的引用相同，那肯定是相同的</span></span><br><span class=\"line\">        <span class=\"comment\">// a quick test to see if the objects are identical.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == otherObject) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 判断参数是否非空</span></span><br><span class=\"line\">        <span class=\"comment\">// must return false if the explicit parameter is null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (otherObject == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3. 判断是否为同一类</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里需要看情况处理</span></span><br><span class=\"line\">        <span class=\"comment\">// * 子类能够拥有自己的相等概念，则对称性需求将强制采用getClass进行检测</span></span><br><span class=\"line\">        <span class=\"comment\">// ** 超类决定了相等的概念，那么使用instanceof判断是否是该超类的子类就可以了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getClass() != otherObject.getClass()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4. 判断被比较的两个对象的状态是否一致</span></span><br><span class=\"line\">        <span class=\"comment\">// now we know 'otherObject' which 'non-null YourClass'</span></span><br><span class=\"line\">        YourClass other = (YourClass) otherObject;</span><br><span class=\"line\">        <span class=\"comment\">// 假设你的对象实例域有：name,salary,hireDay</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> name.eaquals(other.name) &amp;&amp; salary == other.salary &amp;&amp; hireDay.eaquals(other.hireDay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"hashCode\"><a href=\"#hashCode\" class=\"headerlink\" title=\".hashCode()\"></a>.hashCode()</h3><p>散列码（hash code）是由对象导出的一个整型值，它是没有规律的。<br>需要注意一些类的散列码的值，如StringBuffer类，它没有定义hashCode方法，它的散列码是由Object类的默认hashCode方法导出的对象存储地址。所以虽然内容相同，但生成的hash code却不相同<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder a = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"Aprilsx\"</span>);</span><br><span class=\"line\">StringBuilder b = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"Aprilsx\"</span>);</span><br><span class=\"line\">a.hashCode != b.hashCode</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\".toString()\"></a>.toString()</h3><p>通常在子类中重写该方法，设计子类的域的描述。<br>随处可见toString()方法的主要原因是：只要对象与一个字符串通过操作符“+”连接起来，java编译就会自动调用toString()方法，以便获得这个对象的字符串描述。</p>\n<p><br></p>\n<blockquote>\n<p>  参考文献：<br>  [ 1 ] 《Java核心技术 I》- p166<br><br></p>\n</blockquote>\n<p>🍀From Clover <a href=\"https://aprilsx.github.io/2018/03/26/sprouting180326/\">https://aprilsx.github.io/2018/03/26/sprouting180326/</a> </p>\n","categories":[],"tags":[{"name":"sprouting","slug":"sprouting","count":11,"path":"api/tags/sprouting.json"}]}